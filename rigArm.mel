
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Searches a node and its descendants and returns the first name of the joint whose name contains 
// a specified substring. Otherwise, returns an empty string.
global proc string search(string $root, string $keyword){   
    string $parsed = `tolower $root`;
    
    // Check the root first
    if(`match $keyword $parsed` != "" || $keyword == "")
        return $root;
    
    // Then check its descendants
    string $descendants[] = `listRelatives -ad -type joint $root`;
    
    for($d in $descendants){  
        $parsed = `tolower $d`;
        
        if(`match $keyword $parsed` != "" || $keyword == "")
           return $d;
    }
    return "";
}

// Creates an IK handle from the start to end node. Returns the name of the handle and effector.
// If rotatePlane is true, create an IK handle that uses a rotation plane solver.
// Otherwise, create an IK handle that uses a single chain solver.
global proc string[] createIK(string $name, string $start, string $end, int $rotatePlane){
    // Check for valid input
    if($rotatePlane != 0 && $rotatePlane != 1)
        error("second arg is not 0 or 1");
    
    // Handle duplication
    if(`objExists $name`){
      int $ctr = 1;
      while(`objExists ($name + $ctr)`){
          $ctr++;
      }
      $name = $name + (string)$ctr;
    } 
    
    $ikCommand = "ikHandle -sj " +  $start + " -ee "  + $end; 
    
    // Custom name for handle   
    if($name != "")
        $ikCommand += " -n " + $name; 
        
    // Use single chain solver (default is rotation plane solver).
    if($rotatePlane == 0)
        $ikCommand += "-sol ikSCsolver";
        
    return eval($ikCommand);     
}

// Modified from script uploaded on LMS.
// This method creates FK controls for the joints or ikHandles selected.
// The controls can be circular or square-shaped and can be either orient
// or parent-constrainted. 
global proc createCTRL(float $radius, string $customPrefix, int $isSquare, int $parentConstrain){
    // get nodes in current selection, filtered by type 'joint'
    string $nodes[];
    // clear the selection
    $nodes =`ls -sl -type joint`;  
    
    // If no joints selected, check for ikHandles
    if(size($nodes) == 0){
        $nodes =`ls -sl -type ikHandle`; 
    }
    select -cl;    
    
    string $prevNode = "";
    for ($node in $nodes)
    {
        // Construct name a new NURBS circle control
        string $newCircleName = $customPrefix + $node + "_CTRL";
        
        // Control with the same name already exists -> do not create the control
        if(`objExists $newCircleName`) 
            continue;
        
        // name for a new buffer group node to hold the control
        string $newGroupName = $customPrefix + $node + "_CTRL_GRP";
        
        // create the control circle
        string $newCircle[];
        
        if($isSquare == 0)
            $newCircle = `circle -c 0 0 0 -nr 1 0 0 -sw 360 -r $radius -d 3 -ut 0 -tol 0.01 -s 8 -ch 1 -name $newCircleName`;
        else if($isSquare == 1)
            $newCircle = `circle -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 1 -ut 0 -tol 0.01 -s 4 -ch 1  -name $newCircleName`;
            

        // select the circle
        select -r $newCircle[0];
        
        // shift-select the joint
        select -tgl $node;
        
        // match transforms to align the circle to the joint
        matchTransform -pos;
        matchTransform -rot;
        select -cl;
        
        // create an empty group
        $newGroup=`group -em -w -name $newGroupName`;
        
        // align the empty group to the joint
        select -r $newGroup;
        select -tgl $node;
        matchTransform -pos -rot;
        select -cl;
        
        // parent the control to the group
        select -r $newCircleName;
        select -tgl $newGroup;
        parent;
        
        // parent buffer group to previous control we have just created
        if($prevNode != "")
            parent $newGroup $prevNode;
        
        // freeze transforms on the control
        select -cl;
        select -r $newCircleName;
        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1;	// identity matrix
        
        // create an orient constraint from the control to the joint
        select -cl;
        select -r $newCircleName;
        select -tgl $node;
        
        print("Creating between " + $newCircleName + " and " + $node + "\n");
        
        // Apply orient or parent constraint
        if($parentConstrain == 0){
            doCreateOrientConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
            orientConstraint -offset 0 0 0 -weight 1;
        }
        else if($parentConstrain == 1){
            doCreateParentConstraintArgList 1 { "1","0","0","0","0","0","0","0","1","","1" };
            parentConstraint -mo -weight 1;
        }
        
        // Point to the previous node
        $prevNode = $newCircleName;
    }
    
    select -cl;
}

// Automatically rigs an arm in an FK setup
global proc FKArm(string $customPrefix){    

    string $nodes[]=`ls -sl -type joint`;  
    // clear the selection
    select -cl;    
    
    for ($n in $nodes){
        string $clavicle = search($n, "clavicle");
        string $shoulder = search($n, "shoulder");
        string $elbow = search($n, "elbow");
        string $wrist = search($n, "wrist");
        
        if($clavicle != "")
            select -add $clavicle;
            
        if($shoulder != "")
            select -add $shoulder;
        
        if($elbow != "")
            select -add $elbow;
        
        if($wrist != "")
            select -add $wrist;
    }
    
    createCTRL(1, $customPrefix, 0, 0);
}

// Creates an IK arm and corresponding controller.
global proc IKArm (string $customPrefix){
    // Get selected root joint
    string $nodes[]=`ls -sl -type joint`;
    select -cl;                  // clear selection    
    string $root = $nodes[0];    // Pop to get the root joint
    
    string $shoulder = search($root, "shoulder");
    string $forearm = search($root, "forearm");
    string $wrist = search($root, "wrist");
    
    // Write our IK handle
    string $ikHandle[] = createIK($customPrefix + $wrist + "_IK", $shoulder, $forearm, 1);
    
    
    // Adjust pivot point
    float $pivotPos[] = `xform -q -t -ws $wrist`;
    xform -worldSpace -pivots $pivotPos[0] $pivotPos[1] $pivotPos[2] $ikHandle[1]; 
    
    
    select $ikHandle[0];
    createCTRL(1, $customPrefix, 1, 1);
    print("create the IK\n");
}


// Creates an IKFK switch and toggles between IK and FK CTRLs.
// This methods expects a shoulder, elbow, and wrist joint selected. 
// Selecting a clavicle joint is optional. 
global proc IKFKSwitch (string $customPrefix){
    // Get selected root joint
    string $nodes[]=`ls -sl -type joint`;
    select -cl;                  // clear selection    
    string $root = $nodes[0];    // Pop to get the root joint
    
    string $wrist = search($root, "wrist");
    string $elbow = search($root, "elbow");
    string $shoulder = search($root, "shoulder");
    string $clavicle = search($root, "clavicle");
    
    string $IKFK = $customPrefix + $wrist + "_IKFK_Switch";
    
    // Part 1: Create the switch
    // -------------------------------------------------
    spaceLocator -p 0 0 0 -n $IKFK;
    
    select -add $wrist;
    matchTransform -pos;
    
    select -deselect $wrist;
    move -r -os -wd 0 1.5 0 ;
    scale -r 0.5 0.5 0.5;
    
    select -cl;
    
    // Add IKFK attribute
    string $attrIKFK = ($IKFK + ".IKFK");
    addAttr -ln "IKFK"  -at long  -dv 0 $IKFK;
    setAttr -e-keyable true $attrIKFK;
    
    // Part 2: Set IKFK values to influence CNTRLs visibility
    // -------------------------------------------------
    string $FKWrist = $customPrefix + $wrist + "_CTRL_GRP";
    string $FKElbow = $customPrefix + $elbow + "_CTRL_GRP";
    string $FKShoulder = $customPrefix + $shoulder + "_CTRL_GRP";
    string $FKClavicle = $customPrefix + $clavicle + "_CTRL_GRP";
    string $IKWrist = $customPrefix + $wrist + "_IK_CTRL_GRP";
    string $IKHandle = $customPrefix + $wrist + "_IK";
    
    // When IKFK = 0, hide FKs
    setAttr ($FKWrist + ".visibility") 0;
    setAttr ($FKElbow + ".visibility") 0;
    setAttr ($FKShoulder + ".visibility") 0;
    
    if($FKClavicle != "_CTRL_GRP")
        setAttr ($FKClavicle + ".visibility") 0;
        
    setAttr ($IKWrist + ".visibility") 1;
    setAttr ($IKHandle + ".ikBlend") 1;
    
    setDrivenKeyframe -currentDriver $attrIKFK ($FKWrist + ".visibility");
    setDrivenKeyframe -currentDriver $attrIKFK ($FKElbow + ".visibility");
    setDrivenKeyframe -currentDriver $attrIKFK ($FKShoulder + ".visibility");
    
    if($FKClavicle != "_CTRL_GRP")
        setDrivenKeyframe -currentDriver $attrIKFK ($FKClavicle + ".visibility");
        
    setDrivenKeyframe -currentDriver $attrIKFK ($IKWrist + ".visibility");
    setDrivenKeyframe -currentDriver $attrIKFK ($IKHandle + ".ikBlend");
    
    
    // When IKFK = 1, show FKs
    setAttr $attrIKFK 1;
    
    setAttr ($FKWrist + ".visibility") 1;
    setAttr ($FKElbow + ".visibility") 1;
    setAttr ($FKShoulder + ".visibility") 1;
    
    if($FKClavicle != "_CTRL_GRP")
        setAttr ($FKClavicle + ".visibility") 1;
    
    setAttr ($IKWrist + ".visibility") 0;
    setAttr ($IKHandle + ".ikBlend") 0;
    
    setDrivenKeyframe -currentDriver $attrIKFK ($FKWrist + ".visibility");
    setDrivenKeyframe -currentDriver $attrIKFK ($FKElbow + ".visibility");
    setDrivenKeyframe -currentDriver $attrIKFK ($FKShoulder + ".visibility");
    
    if($FKClavicle != "_CTRL_GRP")
        setDrivenKeyframe -currentDriver $attrIKFK ($FKClavicle + ".visibility");
    
    setDrivenKeyframe -currentDriver $attrIKFK ($IKWrist + ".visibility");
    setDrivenKeyframe -currentDriver $attrIKFK ($IKHandle + ".ikBlend");
    
    
    // Part 3: Post-processing
    // -------------------------------------------------
    // Parent constrain IKFK switch to wrist joint
    select -r $wrist;
    select -add $IKFK;
    doCreateParentConstraintArgList 1 { "1","0","0","0","0","0","0","0","1","","1" };
    parentConstraint -mo -weight 1;
    select -cl;
    
    // Parent constrain IK Wrist to FK elbow
    select -r ($customPrefix + $elbow + "_CTRL");
    select -add $IKWrist;
    doCreateParentConstraintArgList 1 { "1","0","0","0","0","0","0","0","1","","1" };
    parentConstraint -mo -weight 1;
    select -cl;
}

// Helper function for reverse foot
global proc autoArmHelper(string $customPrefix, int $mode){
    string $nodes[]=`ls -sl -type joint`;
    
    if(size($nodes) < 1){
        error("No joints selected");
        return;
    }
    
    for($n in $nodes){    
        select -cl;
        
        if($mode == 1){
            select $n;
            IKArm($customPrefix);
        }
        else if ($mode == 2){
            select $n;
            FKArm($customPrefix);
        }
        else if ($mode == 3){
            select $n;
            IKArm($customPrefix);
            select -cl;
            
            select $n;
            FKArm($customPrefix);
            select -cl;
            
            select $n;
            IKFKSwitch($customPrefix);
            select -cl;
        }
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Call to autoArm
global proc parseArmInputs(){
    string $prefix = `textField -q -text armPrefix`;
    int $mode = `radioButtonGrp -q -select armGroup`;
    
    autoArmHelper ($prefix, $mode);
}

// Closes the window
global proc closeArmWindow(){
   deleteUI -window revArmWindow; 
}

// Undo autoArm rig
global proc undoArmRig(){
    string $lastCommand = `undoInfo -q -undoName`;
    
    if($lastCommand == "parseArmInputs")
        undo;
}

// Draw our UI window and then display it 
global proc drawArmWindow(){
    window 
        -title "IKFK Arm"
        revArmWindow;
        
        columnLayout;
    		     // Padding
            rowLayout -numberOfColumns 1;
                text -label "" -height 5;
            setParent..;
        
            // Arm type
            radioButtonGrp
        			-numberOfRadioButtons 3
        			-label "Type:    "
        			-labelArray3 "IK" "FK" "IKFK Switch"
        			-select 3 // default selection
        			-cw4 140 60 60 60
    			    armGroup;
    		
            // Custom Prefix
            rowLayout -numberOfColumns 2;
                text -label "Custom Prefix:   " -al "right" -width 140;
                textField armPrefix;    
            setParent..;
            
    		      // Padding
            rowLayout -numberOfColumns 1;
                text -label "" -height 5;
            setParent..;
        
            // Action butttons
            rowLayout -numberOfColumns 4;
                text -label "" -width 8;
                button -label "Rig" -width 125 -command parseArmInputs;
                button -label "Undo" -width 125 -command undoArmRig;
                button -label "Close" -width 125 -command closeArmWindow;
            setParent ..;
    		
    // Set window dimensions (width/height)
    window -edit -widthHeight 400 100 revArmWindow;
}

// Open the window if it isn't already opened
global proc openArmWindow(){    
    int $checkExists = `window -q -exists revArmWindow`;
    
    if($checkExists == 0)
        drawArmWindow();
    showWindow revArmWindow;    
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Our calls
openArmWindow();